function initializeMobileMenu() {  const navMenu = document.getElementById('nav-menu');  const navToggle = document.getElementById('nav-toggle');  const navClose = document.getElementById('nav-close');  if (navToggle && navMenu) {    navToggle.addEventListener('click', () => {      navMenu.classList.add('show-menu');    });  }  if (navClose && navMenu) {    navClose.addEventListener('click', () => {      navMenu.classList.remove('show-menu');    });  }  if (navMenu) {    const navLinks = document.querySelectorAll('.nav-link');    navLinks.forEach(link => {      link.addEventListener('click', () => {        navMenu.classList.remove('show-menu');      });    });  }}document.addEventListener('DOMContentLoaded', initializeMobileMenu);function scrollHeader() {  const header = document.getElementById('header');  if (window.scrollY >= 50) {    header.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.1)';  } else {    header.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.08)';  }}window.addEventListener('scroll', scrollHeader);const sections = document.querySelectorAll('section[id]');function scrollActive() {  const scrollY = window.pageYOffset;  document.querySelectorAll('.nav-link').forEach(link => {    link.classList.remove('active');  });  const sectionToLinkMap = {    'home': 'home',    'sobre': 'sobre',    'avaliacoes': 'sobre',    'credenciais': 'sobre',    'rodape-sobre': 'sobre',    'consultorio': 'sobre',    'servicos': 'servicos',    'projetos': 'projetos',    'faq': 'projetos',    'contato': 'contato'  };  let activeSection = null;  sections.forEach(current => {    const sectionHeight = current.offsetHeight;    const sectionTop = current.offsetTop - 100;    const sectionId = current.getAttribute('id');    if (scrollY > sectionTop && scrollY <= sectionTop + sectionHeight) {      activeSection = sectionId;    }  });  if (activeSection && sectionToLinkMap[activeSection]) {    const targetLink = sectionToLinkMap[activeSection];    const linkElement = document.querySelector(`.nav-link[href*="${targetLink}"]`);    if (linkElement) {      linkElement.classList.add('active');    }  }}window.addEventListener('scroll', scrollActive);document.addEventListener('DOMContentLoaded', scrollActive);function initializeFAQ() {  const faqItems = document.querySelectorAll('.faq-item');  faqItems.forEach(item => {    const question = item.querySelector('.faq-question');    if (question) {      question.addEventListener('click', () => {        const isActive = item.classList.contains('active');        faqItems.forEach(faq => faq.classList.remove('active'));        if (!isActive) {          item.classList.add('active');        }      });    }  });}document.addEventListener('DOMContentLoaded', initializeFAQ);function initializeSmoothScroll() {  document.querySelectorAll('a[href^="#"]').forEach(anchor => {    anchor.addEventListener('click', function (e) {      e.preventDefault();      const target = document.querySelector(this.getAttribute('href'));      if (target) {        const headerHeight = document.getElementById('header').offsetHeight;        const targetPosition = target.offsetTop - headerHeight;        window.scrollTo({          top: targetPosition,          behavior: 'smooth'        });      }    });  });}document.addEventListener('DOMContentLoaded', initializeSmoothScroll);function initializeScrollReveal() {  const observerOptions = {    threshold: 0.1,    rootMargin: '0px 0px -50px 0px'  };  const observer = new IntersectionObserver((entries) => {    entries.forEach(entry => {      if (entry.isIntersecting) {        entry.target.style.opacity = '1';        entry.target.style.transform = 'translateY(0)';      }    });  }, observerOptions);  const animatedElements = document.querySelectorAll('.feature-card, .servico-card, .projeto-card, .faq-item, .info-card');  animatedElements.forEach(el => {    el.style.opacity = '0';    el.style.transform = 'translateY(30px)';    el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';    observer.observe(el);  });}document.addEventListener('DOMContentLoaded', initializeScrollReveal);window.addEventListener('load', () => {  document.body.classList.remove('page-loading');  document.body.classList.add('page-loaded');});document.addEventListener('DOMContentLoaded', () => {  document.body.classList.add('page-loading');  const internalLinks = document.querySelectorAll('a[href]');  internalLinks.forEach(link => {    const href = link.getAttribute('href');    if (!href || href.startsWith('#') || href.startsWith('http') || href.includes('wa.me') || href.includes('mailto:')) {      return;    }    link.addEventListener('click', (e) => {      e.preventDefault();      const target = link.href;      document.body.classList.add('page-transitioning');      setTimeout(() => {        window.location.href = target;      }, 300); // Mesmo tempo da transição CSS    });  });});function initializeForms() {  const forms = document.querySelectorAll('form');  forms.forEach(form => {    form.addEventListener('submit', (e) => {      e.preventDefault();      const formData = new FormData(form);      const data = Object.fromEntries(formData);      console.log('Form data:', data);    });  });}document.addEventListener('DOMContentLoaded', initializeForms);function initializeWhatsAppTracking() {  const whatsappButtons = document.querySelectorAll('a[href*="wa.me"]');  whatsappButtons.forEach(btn => {    btn.addEventListener('click', () => {      if (typeof gtag !== 'undefined') {        gtag('event', 'click', {          'event_category': 'WhatsApp',          'event_label': 'Contato via WhatsApp'        });      }      console.log('WhatsApp click tracked');    });  });}document.addEventListener('DOMContentLoaded', initializeWhatsAppTracking);function initializeLazyLoading() {  if ('IntersectionObserver' in window) {    const imageObserver = new IntersectionObserver((entries) => {      entries.forEach(entry => {        if (entry.isIntersecting) {          const img = entry.target;          img.src = img.dataset.src || img.src;          img.classList.add('loaded');          imageObserver.unobserve(img);        }      });    });    const images = document.querySelectorAll('img[loading="lazy"]');    images.forEach(img => imageObserver.observe(img));  }}document.addEventListener('DOMContentLoaded', initializeLazyLoading);function updateCopyrightYear() {  const currentYear = new Date().getFullYear();  const copyrightElements = document.querySelectorAll('.footer-bottom p');  copyrightElements.forEach(el => {    el.innerHTML = el.innerHTML.replace('2025', currentYear);  });}document.addEventListener('DOMContentLoaded', updateCopyrightYear);function initializeSocialShare() {  const currentUrl = encodeURIComponent(window.location.href);  const pageTitle = encodeURIComponent(document.title);  const shareContainer = document.querySelector('.post-share');  if (shareContainer) {    const facebookBtn = shareContainer.querySelector('a[aria-label*="Facebook"]');    const twitterBtn = shareContainer.querySelector('a[aria-label*="Twitter"]');    const linkedinBtn = shareContainer.querySelector('a[aria-label*="LinkedIn"]');    const whatsappBtn = shareContainer.querySelector('a[aria-label*="WhatsApp"]');    if (facebookBtn) {      facebookBtn.href = `https://www.facebook.com/sharer/sharer.php?u=${currentUrl}`;    }    if (twitterBtn) {      twitterBtn.href = `https://twitter.com/intent/tweet?url=${currentUrl}&text=${pageTitle}`;    }    if (linkedinBtn) {      linkedinBtn.href = `https://www.linkedin.com/sharing/share-offsite/?url=${currentUrl}`;    }    if (whatsappBtn) {      whatsappBtn.href = `https://wa.me/?text=${pageTitle}%20-%20${currentUrl}`;    }  }}document.addEventListener('DOMContentLoaded', initializeSocialShare);function initializeConsultorioCarousel() {  const carousel = document.querySelector('.consultorio-carousel');  if (!carousel) return;  const track = carousel.querySelector('.carousel-track');  const slides = carousel.querySelectorAll('.carousel-slide');  const prevBtn = carousel.querySelector('.carousel-prev');  const nextBtn = carousel.querySelector('.carousel-next');  const dots = carousel.querySelectorAll('.carousel-dot');  let currentSlide = 0;  const totalSlides = slides.length;  function updateCarousel() {    slides.forEach(slide => slide.classList.remove('active'));    dots.forEach(dot => dot.classList.remove('active'));    slides[currentSlide].classList.add('active');    dots[currentSlide].classList.add('active');  }  function nextSlide() {    currentSlide = (currentSlide + 1) % totalSlides;    updateCarousel();  }  function prevSlide() {    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;    updateCarousel();  }  function goToSlide(index) {    currentSlide = index;    updateCarousel();  }  if (nextBtn) {    nextBtn.addEventListener('click', nextSlide);  }  if (prevBtn) {    prevBtn.addEventListener('click', prevSlide);  }  dots.forEach((dot, index) => {    dot.addEventListener('click', () => goToSlide(index));  });  updateCarousel();  document.addEventListener('keydown', (e) => {    const carouselRect = carousel.getBoundingClientRect();    const isVisible = carouselRect.top < window.innerHeight && carouselRect.bottom > 0;    if (isVisible) {      if (e.key === 'ArrowLeft') {        prevSlide();      } else if (e.key === 'ArrowRight') {        nextSlide();      }    }  });  let touchStartX = 0;  let touchEndX = 0;  carousel.addEventListener('touchstart', (e) => {    touchStartX = e.changedTouches[0].screenX;  }, { passive: true });  carousel.addEventListener('touchend', (e) => {    touchEndX = e.changedTouches[0].screenX;    handleSwipe();  }, { passive: true });  function handleSwipe() {    const swipeThreshold = 50; // Mínimo de pixels para considerar um swipe    if (touchEndX < touchStartX - swipeThreshold) {      nextSlide();    }    if (touchEndX > touchStartX + swipeThreshold) {      prevSlide();    }  }}document.addEventListener('DOMContentLoaded', initializeConsultorioCarousel);function initCookieBanner() {  const cookieBanner = document.getElementById('cookie-banner');  const acceptBtn = document.getElementById('cookie-accept');  if (!cookieBanner || !acceptBtn) return;  const cookiesAccepted = localStorage.getItem('cookiesAccepted');  if (!cookiesAccepted) {    setTimeout(() => {      cookieBanner.classList.add('show');    }, 1000);  }  acceptBtn.addEventListener('click', () => {    localStorage.setItem('cookiesAccepted', 'true');    cookieBanner.classList.remove('show');    setTimeout(() => {      cookieBanner.style.display = 'none';    }, 300);  });}document.addEventListener('DOMContentLoaded', initCookieBanner);function initializeBlogFilter() {  const filterButtons = document.querySelectorAll('.tag-filter-btn');  const blogCards = document.querySelectorAll('.blog-card');  if (!filterButtons.length || !blogCards.length) return;  filterButtons.forEach(button => {    button.addEventListener('click', () => {      const selectedTag = button.getAttribute('data-tag');      filterButtons.forEach(btn => btn.classList.remove('active'));      button.classList.add('active');      blogCards.forEach(card => {        const cardTags = card.getAttribute('data-tags');        if (selectedTag === 'todos') {          card.style.display = 'block';          setTimeout(() => {            card.style.opacity = '1';            card.style.transform = 'translateY(0)';          }, 10);        } else {          if (cardTags && cardTags.includes(selectedTag)) {            card.style.display = 'block';            setTimeout(() => {              card.style.opacity = '1';              card.style.transform = 'translateY(0)';            }, 10);          } else {            card.style.opacity = '0';            card.style.transform = 'translateY(20px)';            setTimeout(() => {              card.style.display = 'none';            }, 300);          }        }      });      const blogGrid = document.querySelector('.blog-grid');      if (blogGrid) {        const headerHeight = document.getElementById('header').offsetHeight;        const filterHeight = document.querySelector('.blog-tags-filter').offsetHeight;        const targetPosition = blogGrid.offsetTop - headerHeight - filterHeight - 20;        window.scrollTo({          top: targetPosition,          behavior: 'smooth'        });      }    });  });  blogCards.forEach(card => {    card.style.transition = 'opacity 0.3s ease, transform 0.3s ease';  });}document.addEventListener('DOMContentLoaded', initializeBlogFilter);function initializeReviewsCarousel() {  fetch('/assets/data/reviews.json')    .then(res => res.json())    .then(reviews => {      const container = document.getElementById('reviews-container');      if (!container) return;      const getReviewsPerPage = () => window.innerWidth > 768 ? 2 : 1;      let currentIndex = 0;      let reviewsPerPage = getReviewsPerPage();      const widgetHTML = `        <div class="reviews-widget">          <div class="reviews-widget-header">            <img src="https://cdn.trustindex.io/assets/platform/Google/icon.svg" alt="Google" class="google-logo">            <span class="reviews-title">Avaliações</span>            <div class="reviews-rating">              <span class="rating-number">5.0</span>              <div class="rating-stars">★★★★★</div>            </div>          </div>          <div class="reviews-carousel" id="reviews-carousel"></div>          <div class="reviews-nav">            <button class="review-nav-btn" id="review-prev" aria-label="Review anterior">              <i class="fas fa-chevron-left"></i>            </button>            <div class="review-indicators" id="review-indicators"></div>            <button class="review-nav-btn" id="review-next" aria-label="Próximo review">              <i class="fas fa-chevron-right"></i>            </button>          </div>        </div>      `;      container.innerHTML = widgetHTML;      const carousel = document.getElementById('reviews-carousel');      const indicators = document.getElementById('review-indicators');      const prevBtn = document.getElementById('review-prev');      const nextBtn = document.getElementById('review-next');      function truncateText(text, maxLength = 150) {        if (text.length <= maxLength) {          return { truncated: text, isTruncated: false };        }        const truncated = text.substring(0, maxLength).trim() + '...';        return { truncated, isTruncated: true, full: text };      }      function renderReviews() {        reviewsPerPage = getReviewsPerPage();        carousel.innerHTML = '';        const gapSize = 1.5; // rem        const cardWidth = reviewsPerPage === 1          ? '100%'          : `calc((100% - ${gapSize}rem) / ${reviewsPerPage})`;        reviews.forEach((review, index) => {          const stars = '★'.repeat(review.rating) + '☆'.repeat(5 - review.rating);          const { truncated, isTruncated, full } = truncateText(review.text);          const reviewCard = document.createElement('div');          reviewCard.className = 'review-card';          reviewCard.style.flex = `0 0 ${cardWidth}`;          reviewCard.style.maxWidth = cardWidth;          reviewCard.innerHTML = `            <div class="review-header">              <img src="https://cdn.trustindex.io/assets/platform/Google/icon.svg"                   alt="Google"                   class="review-google-icon">              <img src="${review.photo}"                   alt="${review.name}"                   class="review-avatar"                   onerror="this.src='https://via.placeholder.com/40'">              <div class="review-author">                <div class="review-name">${review.name}</div>                <div class="review-date">${review.date}</div>              </div>            </div>            <div class="review-stars">${stars}</div>            <div class="review-text-container">              <p class="review-text">${truncated}</p>              ${isTruncated ? '<button class="read-more-btn" data-expanded="false">Leia mais</button>' : ''}            </div>          `;          if (isTruncated) {            const readMoreBtn = reviewCard.querySelector('.read-more-btn');            const textElement = reviewCard.querySelector('.review-text');            readMoreBtn.addEventListener('click', () => {              const isExpanded = readMoreBtn.getAttribute('data-expanded') === 'true';              if (isExpanded) {                textElement.textContent = truncated;                readMoreBtn.textContent = 'Leia mais';                readMoreBtn.setAttribute('data-expanded', 'false');              } else {                textElement.textContent = full;                readMoreBtn.textContent = 'Leia menos';                readMoreBtn.setAttribute('data-expanded', 'true');              }            });          }          carousel.appendChild(reviewCard);        });        updateCarousel();      }      function updateCarousel() {        const offset = -(currentIndex * 100);        carousel.style.transform = `translateX(${offset}%)`;        updateButtons();        updateIndicators();      }      function updateButtons() {        const totalPages = Math.ceil(reviews.length / reviewsPerPage);        prevBtn.disabled = currentIndex === 0;        nextBtn.disabled = currentIndex >= totalPages - 1;      }      function updateIndicators() {        const totalPages = Math.ceil(reviews.length / reviewsPerPage);        indicators.innerHTML = '';        for (let i = 0; i < totalPages; i++) {          const dot = document.createElement('button');          dot.className = 'review-dot' + (i === currentIndex ? ' active' : '');          dot.setAttribute('aria-label', `Ir para página ${i + 1}`);          dot.addEventListener('click', () => goToPage(i));          indicators.appendChild(dot);        }      }      function goToPage(pageIndex) {        const totalPages = Math.ceil(reviews.length / reviewsPerPage);        if (pageIndex >= 0 && pageIndex < totalPages) {          currentIndex = pageIndex;          updateCarousel();        }      }      prevBtn.addEventListener('click', () => {        if (currentIndex > 0) {          currentIndex--;          updateCarousel();        }      });      nextBtn.addEventListener('click', () => {        const totalPages = Math.ceil(reviews.length / reviewsPerPage);        if (currentIndex < totalPages - 1) {          currentIndex++;          updateCarousel();        }      });      let resizeTimeout;      window.addEventListener('resize', () => {        clearTimeout(resizeTimeout);        resizeTimeout = setTimeout(() => {          const newReviewsPerPage = getReviewsPerPage();          if (newReviewsPerPage !== reviewsPerPage) {            currentIndex = 0; // Reset para o início ao mudar de layout            renderReviews();          }        }, 250);      });      document.addEventListener('keydown', (e) => {        if (!container) return;        const containerRect = container.getBoundingClientRect();        const isVisible = containerRect.top < window.innerHeight && containerRect.bottom > 0;        if (isVisible) {          if (e.key === 'ArrowLeft') {            prevBtn.click();          } else if (e.key === 'ArrowRight') {            nextBtn.click();          }        }      });      let touchStartX = 0;      let touchEndX = 0;      carousel.addEventListener('touchstart', (e) => {        touchStartX = e.changedTouches[0].screenX;      }, { passive: true });      carousel.addEventListener('touchend', (e) => {        touchEndX = e.changedTouches[0].screenX;        handleSwipe();      }, { passive: true });      function handleSwipe() {        const swipeThreshold = 50;        if (touchEndX < touchStartX - swipeThreshold) {          nextBtn.click();        }        if (touchEndX > touchStartX + swipeThreshold) {          prevBtn.click();        }      }      renderReviews();    })    .catch(err => {      console.error('Erro ao carregar avaliações:', err);      const container = document.getElementById('reviews-container');      if (container) {        container.innerHTML = '<p style="text-align: center; color: #666;">Erro ao carregar avaliações. Tente novamente mais tarde.</p>';      }    });}document.addEventListener('DOMContentLoaded', initializeReviewsCarousel);function initializeBlogImageFallback() {  const blogImages = document.querySelectorAll('.blog-image img, .post-featured-image img, .blog-card img');  blogImages.forEach(img => {    img.addEventListener('error', function() {      const isInPostsFolder = window.location.pathname.includes('/posts/');      const placeholderPath = isInPostsFolder        ? '../assets/images/blog-image-placeholder.jpg'        : 'assets/images/blog-image-placeholder.jpg';      if (!this.src.includes('blog-image-placeholder.jpg')) {        this.src = placeholderPath;        this.alt = 'Imagem de postagem do blog';      }    });  });}document.addEventListener('DOMContentLoaded', initializeBlogImageFallback);